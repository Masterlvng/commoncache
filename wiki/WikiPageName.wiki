= The design and implementation of CommonCache Library(base on version 0.6) =

== Overview ==

=== the functions of a cache ===
cache the most frequently visited data in the memory, so:
  * if the the data get losed is not a big matter,it means that you should not store data in cache only, offen, cache is between the DB server and application,hence reduce visiting DB times and speed up application.
 * since the memory is not quite big, so the eliminating algorithm such LRU must to be used. 
 * must support key-value-like API such as find/erase/set and so forth.

=== ccache feature (version 0.6) ===
 * using mmap to cache data in file, so it can be used in multi-thead and multi-process application.
 * support unfix size key node
 * support hash-rbtree and hash-list structure
 * use LRU algorithm to eliminate nodes when it is running out of its memory size
 * fast, 100W/read operation on fix-size key node in no more than 0.5 second

=== what is the difference between ccache and memcached? ===
ccache is a static library, memcached is a cache sever, so users who use ccache must
design the protocols between clients and server, and write the server application themself.

 == implementation ==
=== the cache file structure ===
{{{
                                       ---------------------------------
                                       |                                                 |
                                       |          ccache header             |
                                       |                                                 |
cache->hashitem[0] -->  ---------------------------------
                                       |                                                 |
                                       |          hashitem array            |
                                       |                                                 |
cache->freearea ----->  ---------------------------------
                                       |                                                 |
                                       |          freearea array              |
                                       |                                                 |
                                       ---------------------------------
                                       |                                                 |
                                       |          prealloc nodes            |
                                       |                                                 |
cache->start_free ---->   ---------------------------------
                                       |                                                 |
                                       |          data zone                     |
                                       |                                                 |
                                       ---------------------------------
                                         (Figure 1, the cache file strture)


}}}

== the hashitem array detail    ==
the hashitem array is used to find the node base on the node key.Every nodes in a same hashitem has a same hash num.All the nodes in the same hashitem are strutured in list or rbtree:
{{{
                        ---------------------------------
                        |                                              |                           next
                        |             hashitem[0]            |->first->node1 ----> node2 --->...
                        |                                              |                          <----
                        ---------------------------------                           prev
                        (Figure 2, the hash-list structrue)

                                                                                                parent
                                                                                                |-------------|           
                        --------------------------------- |                    |    | ------> node3 --->...
                        |                                                 |                 \ | /  | right
                        |              hashitem[0]              |->root->node1 --| left
                        |                                                 |                 / | \         |--> node2 --->...
                        |                                                 |                    |-------------|           
                        ---------------------------------                        parent
                        (Figure 3, the hash-rbtree structrue)
}}}
when compiling the ccache, define the macro CCACHE_USE_RBTREE to specily using rbtree,
else macro CCACHE_USE_LIST using list. The structrue ccache_node_t has following fields 
about this:

{{{
typedef struct ccache_node_t
{
        /* 
          ......
         */
#ifdef CCACHE_USE_LIST
    struct ccache_node_t *next, *prev;
#elif defined CCACHE_USE_RBTREE    
    ccache_color_t color;
    struct ccache_node_t *parent, *left, *right;
#endif

        /* 
          ......
         */
}ccache_node_t;
}}}
the hashitem array size is defined in the configure file when open the cache.

== the freearea array detail ==   
ccache use slab-like algorithm to allocate node memory.In the configure file, there is an
item called "alignsize", this value specify the align size between different freearea,
assume the alignsize is 8 bytes: 
{{{

                        ---------------------------------      lrufirst            lrunext
                        |                                             |---------> node1 -------> ... ---> lastnode
                        | freearea[0](size=8bytes)                                <-------             / \
                        |                                             |                           lruprev                   |
                        |                                             | ------------------------------------
                        ---------------------------------                             lrulast
                        |                                            |
                        | freearea[1](size=16bytes)     
                        |                                            |
                        ---------------------------------
                        |                                            |
                        | freearea[2](size=24bytes)     
                        |                                            |
                        ---------------------------------
                        |                                            |
                        |               ....                         |
                        |                                            |
                        ---------------------------------
                        (Figure 1, the cache file strture)
}}}
all the nodes in the same freearea has the same size, when allocating a node(ccache_memory.c/ccache_allocate):
 # allign the node size with the alignsize value, then find the fit 
freearea(ccache_memory.c/ccache_get_freeareaid) and return the freeareaid
 # if the data zone has enough memory for the node, change the cache->start_free and cache->freesize and return the node pointer
 # else, erase the  cache->freearea[freeareaid]->lrulast node, use this node memory for this allocation.
 # every time a node allocated, place it in the freearea's tail(freearea->lrulast = node), when the node has been visited, it move on one step in the freearea list.So, the more a node has been 
visited, the closer it moves to the freearea head(freearea->lrufirst).Hence, the freearea lrulast
node is the less frequently visited node in the freearea(although not so accurate:).

the ccache_node_t structure has following fields about LRU:
{{{
typedef struct ccache_node_t
{
    /*
       ....
    */       
    struct ccache_node_t *lrunext, *lruprev;

    /*
       ....
    */       
}ccache_node_t;
}}}

== configure file items ==
 # mapfile
the cache file path, default is ./ccache_mapfile

 # min_size
min size of a node, default is 16 bytes

 # max_size
max size of a node, default is 32 bytes

if min_size == max_size, means that the cache is fix-key-size cache

 # hashitem
elements number of the the hashitem array, default is 1000

 # datasize
the data zone size,default is 1000000 bytes

 # prealloc_num
the prealloc number of nodes in a freearea when initializing the cache, default is 10

 # alignsize
the align size, default is 8 bytes

# init
memset the cache or not?

== a demo ==